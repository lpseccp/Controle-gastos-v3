// Seleção de Elementos
const form = document.getElementById('form');
const setupForm = document.getElementById('setup-form');
const lista = document.getElementById('lista-transacoes');
const saldoDiv = document.getElementById('saldo');
const saldoPrevistoDiv = document.getElementById('saldoPrevisto');
const graficoPizza = document.getElementById('graficoPizza');
const graficoBarras = document.getElementById('graficoBarras');

// Variáveis globais
let transacoes = JSON.parse(localStorage.getItem('transacoes')) || [];
let salario = parseFloat(localStorage.getItem('salario')) || 0;
let tetoPorCategoria = {};

// Salvar salário e definir tetos automáticos
setupForm.addEventListener('submit', (e) => {
  e.preventDefault();
  salario = parseFloat(document.getElementById('salario').value);
  localStorage.setItem('salario', salario);

  // Definindo tetos padrão
  tetoPorCategoria = {
    'Alimentação': salario * 0.2,
    'Transporte': salario * 0.15,
    'Lazer': salario * 0.1,
    'Outros': salario * 0.1
  };
  localStorage.setItem('tetos', JSON.stringify(tetoPorCategoria));

  alert('Salário salvo!');
  window.location.reload();
});

// Adicionar nova transação
form.addEventListener('submit', (e) => {
  e.preventDefault();

  const descricao = document.getElementById('descricao').value;
  const valor = parseFloat(document.getElementById('valor').value);
  const categoria = document.getElementById('categoria').value;
  const tipo = document.getElementById('tipo').value;

  if (!descricao || !valor || !categoria || !tipo) {
    alert('Preencha todos os campos!');
    return;
  }

  transacoes.push({ descricao, valor, categoria, tipo, data: new Date() });
  localStorage.setItem('transacoes', JSON.stringify(transacoes));
  form.reset();
  atualizarTela();
});

// Atualizar a tela toda
function atualizarTela() {
  lista.innerHTML = '';
  let saldo = 0;
  let despesasPorCategoria = {};
  let receitas = 0;
  let despesas = 0;

  transacoes.forEach((item) => {
    const li = document.createElement('li');
    li.textContent = `${item.descricao} - R$ ${item.valor.toFixed(2)} (${item.categoria})`;
    lista.appendChild(li);

    if (item.tipo === 'receita') {
      saldo += item.valor;
      receitas += item.valor;
    } else {
      saldo -= item.valor;
      despesas += item.valor;

      // Controle de despesas por categoria
      if (!despesasPorCategoria[item.categoria]) despesasPorCategoria[item.categoria] = 0;
      despesasPorCategoria[item.categoria] += item.valor;

      // Alertas
      const teto = (JSON.parse(localStorage.getItem('tetos')) || {})[item.categoria] || 0;
      if (teto > 0 && despesasPorCategoria[item.categoria] >= teto * 0.8 && despesasPorCategoria[item.categoria] < teto) {
        alert(`Atenção: Você já gastou 80% do limite de ${item.categoria}!`);
      }
      if (teto > 0 && despesasPorCategoria[item.categoria] >= teto) {
        alert(`Você ultrapassou o limite de ${item.categoria}!`);
      }
    }
  });

  saldoDiv.innerText = `Saldo Atual: R$ ${saldo.toFixed(2)}`;
  saldoDiv.style.color = saldo < 0 ? 'red' : 'green';

  // Previsão de saldo
  const diasRestantes = 30 - new Date().getDate();
  const mediaGastoDiario = despesas / (30 - diasRestantes || 1);
  const saldoPrevisto = saldo - (mediaGastoDiario * diasRestantes);

  saldoPrevistoDiv.innerText = `Saldo Previsto no Mês: R$ ${saldoPrevisto.toFixed(2)}`;
  saldoPrevistoDiv.style.color = saldoPrevisto < 0 ? 'red' : 'green';

  atualizarGraficos(despesasPorCategoria, receitas, despesas);
}

// Atualizar gráficos
let pizzaChart;
let barrasChart;

function atualizarGraficos(despesasPorCategoria, receitas, despesas) {
  if (pizzaChart) pizzaChart.destroy();
  if (barrasChart) barrasChart.destroy();

  const categorias = Object.keys(despesasPorCategoria);
  const valores = Object.values(despesasPorCategoria);

  // Gráfico de Pizza
  pizzaChart = new Chart(graficoPizza, {
    type: 'pie',
    data: {
      labels: categorias,
      datasets: [{
        label: 'Gastos por Categoria',
        data: valores,
        backgroundColor: ['#f44336', '#ff9800', '#4caf50', '#2196f3'],
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { position: 'bottom' } }
    }
  });

  // Gráfico de Barras
  barrasChart = new Chart(graficoBarras, {
    type: 'bar',
    data: {
      labels: ['Receitas', 'Despesas'],
      datasets: [{
        label: 'Fluxo Financeiro',
        data: [receitas, despesas],
        backgroundColor: ['#4caf50', '#f44336']
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { display: false } },
      scales: {
        y: { beginAtZero: true }
      }
    }
  });
}

// Atualizar ao carregar
atualizarTela();